(()=>{var __webpack_modules__={859:()=>{eval('const token = localStorage.getItem(\'token\').toString();\nconsole.log(token);\n// constatnts\nlet reservations = [];\nlet persons = [];\nlet rooms = [];\nlet admin = { id: 1, surname: "admin", firstname: "admin", email: "admin@admin.admin", grade: "admin" };\nconst startTimeArray = ["07:00", "08:00", "08:55", "10:00", "10:55", "11:50", "12:45", "13:40", "14:35", "15:30", "16:25", "17:20", "18:15", "19:10", "20:05", "21:00", "21:55"];\nconst endTimeArray = ["07:50", "08:50", "09:45", "10:50", "11:45", "12:40", "13:35", "14:30", "15:25", "16:20", "17:15", "18:10", "19:05", "20:00", "20:50", "21:45", "22:40"];\nconst dayArray = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag"];\nconst dayAsDateArray = getCurrentWeek(new Date(localStorage.getItem("date")));\nconst dayDefaultValue = "Montag";\nconst startTimeDefaultValue = "-- Startzeit --";\nconst endTimeDefaultValue = "-- Endzeit --";\nconst urlParams = new URLSearchParams(window.location.search);\nconst roomValue = urlParams.get(\'roomValue\');\nconst newUri = "index.html?roomValue=Fotostudio";\nconst url = \'http://152.67.77.62:8080/api/reservations\';\nvar olderReservation = null;\nvar isRoomShown = false;\nvar isCalendarShown = false;\n// no more room null\nif (roomValue == null) {\n    window.location.href = newUri;\n}\nlet promise;\n// HIER EVENT LISTENER BLYAD\ndocument.getElementById("changeRoom").addEventListener("click", showRooms);\ndocument.getElementById("openCalendar").addEventListener("click", openCalendar);\n// MODAL\ndocument.addEventListener("DOMContentLoaded", () => {\n    promise = loadPersonsFromDatabase();\n    const openPopupButton = document.getElementById("openPopupButton");\n    const modal = document.getElementById("myModal");\n    const closeIcon = document.querySelector(".close");\n    const roomTableHeader = document.getElementById("displayRoom");\n    const montag = document.getElementById("montag");\n    const dienstag = document.getElementById("dienstag");\n    const mittwoch = document.getElementById("mittwoch");\n    const donnerstag = document.getElementById("donnerstag");\n    const freitag = document.getElementById("freitag");\n    const submitButton = document.getElementById("submitButton");\n    // get dropdowns\n    getRoomsFromDatabase();\n    const dropdownDay = document.getElementById("day");\n    const dropdownStartTime = document.getElementById("time");\n    const dropdownEndTime = document.getElementById("timeE");\n    //timeTableHeader.innerHTML = `${dayAsDateArray[0]} / ${dayAsDateArray[4]}`;\n    roomTableHeader.innerHTML = `<h3>${roomValue}</h3>`;\n    montag.innerHTML += `<br>${dayAsDateArray[0]}`;\n    dienstag.innerHTML += `<br>${dayAsDateArray[1]}`;\n    mittwoch.innerHTML += `<br>${dayAsDateArray[2]}`;\n    donnerstag.innerHTML += `<br>${dayAsDateArray[3]}`;\n    freitag.innerHTML += `<br>${dayAsDateArray[4]}`;\n    openPopupButton.addEventListener("click", () => {\n        modal.style.display = "block";\n        // set value at dropdowns\n        dropdownDay.value = dayDefaultValue;\n        dropdownStartTime.value = startTimeDefaultValue;\n        dropdownEndTime.value = endTimeDefaultValue;\n    });\n    closeIcon === null || closeIcon === void 0 ? void 0 : closeIcon.addEventListener("click", () => {\n        modal.style.display = "none";\n        submitButton.innerHTML = "Reserviere";\n    });\n    window.addEventListener("click", (event) => {\n        // Close modal when clicking outside of it\n        if (event.target === modal) {\n            modal.style.display = "none";\n            submitButton.innerHTML = "Reserviere";\n        }\n    });\n});\n// \ndocument.addEventListener("DOMContentLoaded", async () => {\n    // Function to assign unique IDs to the columns\n    const table = document.querySelector("table");\n    const headers = table.querySelectorAll("th");\n    const rows = table.querySelectorAll("tr");\n    // Iterate through each header and row\n    for (let i = 1; i < headers.length; i++) {\n        if (!headers[i].classList.contains("hour")) {\n            for (let j = 1; j < rows.length; j++) {\n                const cell = rows[j].children[i];\n                // Generate a unique ID based on the column index and row index\n                cell.id = `cell_${j}_${i}`;\n                // Add event listeners programmatically\n                cell.addEventListener(\'drop\', (event) => drop(event, cell));\n                cell.addEventListener(\'dragover\', allowDrop);\n                cell.addEventListener(\'click\', function () {\n                    openModalWithOnclick(cell.id);\n                });\n            }\n        }\n    }\n    await promise.then(async () => {\n        displayRooms();\n        await getReservationsFromDatabase();\n    });\n});\n// Reserving room per onlick\nfunction openModalWithOnclick(cellId) {\n    closeCalendar();\n    // get modal\n    const isReservated = reservations.some(function (reservation) {\n        let columnAsString = getColumnId(reservation);\n        for (let i = 0; i < columnAsString.length; i++) {\n            if (columnAsString[i] === cellId) {\n                return true;\n            }\n        }\n        return false;\n    });\n    const submit = document.getElementById("submitButton");\n    if (!isReservated || submit.innerHTML === "Speichern") {\n        //let email = getPersonFromId(getReservation(cellId).personId).email;\n        let email;\n        let reservation = getReservation(cellId);\n        if (reservation != null) {\n            email = getPersonFromId(reservation.personId).email;\n        }\n        else {\n            email = persons[0].email;\n            console.log(persons);\n            console.log("Email: " + email);\n        }\n        const modal = document.getElementById("myModal");\n        // show modall\n        modal.style.display = "block";\n        // get dropdown elements\n        const dropdownDay = document.getElementById("day");\n        const dropdownStartTime = document.getElementById("time");\n        const dropdownEndTime = document.getElementById("timeE");\n        const dropdrownEmail = document.getElementById("email");\n        // split id into row and column\n        let array = cellId.split("_");\n        // get data from column\n        const day = dayArray[Number(array[2]) - 1];\n        const startTime = startTimeArray[Number(array[1]) - 1];\n        const endTime = endTimeArray[Number(array[1]) - 1];\n        7;\n        // set value of dropdown in modal\n        dropdownDay.value = day;\n        dropdownStartTime.value = startTime;\n        dropdownEndTime.value = endTime;\n        dropdrownEmail.value = email + "";\n    }\n    else {\n        showReservationInfo(getReservation(cellId));\n    }\n}\n// get all values from dropdown & do reservation\ndocument.addEventListener("DOMContentLoaded", () => {\n    const dropdownDay = document.getElementById("day");\n    const dropdownStartTime = document.getElementById("time");\n    const dropdownEndTime = document.getElementById("timeE");\n    const dropDownEmails = document.getElementById("email");\n    const submitButton = document.getElementById("submitButton");\n    submitButton.value = "Reserviere";\n    submitButton === null || submitButton === void 0 ? void 0 : submitButton.addEventListener("click", async () => {\n        const modal = document.getElementById("myModal");\n        modal.style.display = "none";\n        // get values from dropdown\n        const startTime = dropdownStartTime.value;\n        const endTime = dropdownEndTime.value;\n        const day = dropdownDay.value;\n        const personId = getPersonFromEmail(dropDownEmails.value).id;\n        let dayId;\n        // ceck if all set\n        if (startTime && endTime && day) {\n            // get day position in array\n            for (let i = 0; i < dayArray.length; i++) {\n                if (dayArray[i] === day) {\n                    dayId = i;\n                }\n            }\n            const reservation = { roomId: getRoomFromName(roomValue).id, personId: personId, startTime: parseToLocalDateTimeFormat(dayAsDateArray[dayId], startTime), endTime: parseToLocalDateTimeFormat(dayAsDateArray[dayId], endTime), reservationDate: dayAsDateArray[dayId] };\n            if (submitButton.innerHTML === "Speichern") {\n                try {\n                    await updateReservationInDatabase(olderReservation, reservation);\n                }\n                catch (error) {\n                    showErrorMessage("Error occured while updating reservation");\n                }\n            }\n            else if (submitButton.innerHTML === "Reserviere") {\n                try {\n                    await addReservationToDatabase(reservation);\n                    getReservationsFromDatabase();\n                }\n                catch (error) {\n                    showErrorMessage(\'Error occured while adding reservation to Database!\');\n                }\n            }\n        }\n        submitButton.innerHTML = "Reserviere";\n    });\n});\nfunction getPersonFromEmail(email) {\n    let result = null;\n    persons.forEach(person => {\n        ;\n        if (person.email === email) {\n            result = person;\n        }\n    });\n    return result;\n}\nfunction getPersonFromId(id) {\n    let result = null;\n    persons.forEach(person => {\n        ;\n        if (person.id === id) {\n            result = person;\n        }\n    });\n    return result;\n}\nfunction parseToLocalDateTimeFormat(date, time) {\n    const localDateTime = date + "T" + time + ":00";\n    return localDateTime;\n}\n// adding color to box\nfunction paintColumnsReservated(array, isMulti, personId) {\n    const person = getPersonFromId(personId);\n    person.grade = \'admin\';\n    for (let i = 0; i < array.length; i++) {\n        let td = document.getElementById(array[i]);\n        if (td) {\n            //id.style.backgroundColor = "#cd7f35";\n            let imgId = array[i] + "Img";\n            if (person.grade.charAt(0) === "a") {\n                td.innerHTML = `<p style="position: absolute; color: #000; padding-left: 5%; padding-top: 0.75%;">${person.firstname} ${person.surname}</p>\n                                <img id="${imgId}" src="img/farbe0.png" draggable="true" style="z-index:1.5; opacity: 0.5;">`;\n            }\n            else {\n                td.innerHTML = `<p style="position: absolute; padding-left: 6%;  padding-top: 0.7%;">${person.firstname} ${person.surname}</p>\n                                <img id="${imgId}" src="img/farbe${person.grade.charAt(0)}.png" draggable="true" style="z-index:1.5; opacity: 0.5;">`;\n            }\n            if (!isMulti) {\n                let img = document.getElementById(`${imgId}`);\n                img.style.height = "3.3rem";\n            }\n            // Add event listener for ondragstart\n            document.getElementById(imgId).addEventListener("dragstart", (event) => {\n                drag(event, array[i]);\n            });\n        }\n    }\n}\n// convert ids to the cell id\nfunction cellIdToString(startTimeId, dayId) {\n    return `cell_${startTimeId}_${dayId}`;\n}\n// get assigned columns\nfunction getColumnId(reservation) {\n    let dayId = 0; // id of day\n    let units = 0; // count uf units reservated\n    let startTimeId = 0; // reservation start time\n    let columnIds = []; // array of all ids\n    // get startTime position in array\n    for (let i = 0; i < startTimeArray.length; i++) {\n        if (startTimeArray[i] === parseTime(reservation.startTime)) {\n            startTimeId = i;\n            // get unit s\n            for (let j = i; j < endTimeArray.length; j++) {\n                units++;\n                if (endTimeArray[j] === parseTime(reservation.endTime)) {\n                    break;\n                }\n            }\n            ;\n        }\n    }\n    ;\n    // get day position in array\n    for (let i = 0; i < dayArray.length; i++) {\n        if (dayArray[i] === parseDay(reservation.reservationDate)) {\n            // + 1 because the first column is 1 not 0\n            dayId = i + 1;\n        }\n    }\n    // fill array with the ids from html\n    for (let i = startTimeId; i < startTimeId + units; i++) {\n        columnIds.push(cellIdToString(i + 1, dayId));\n    }\n    return columnIds;\n}\nasync function getReservationsFromDatabase() {\n    const getUrl = url + \'/list\';\n    // get Reservation from database\n    reservations = await fetchDataFromUrl(getUrl);\n    if (reservations) {\n        reservations.forEach(reservation => {\n            // check if correct day and room of reservation\n            if (dayAsDateArray.indexOf(reservation.reservationDate) !== -1 && reservation.roomId === getRoomFromName(roomValue).id) {\n                // print reservation\n                loadReservation(reservation);\n            }\n        });\n    }\n}\nfunction loadReservation(reservation) {\n    reservation.startTime = reservation.startTime.slice(0, -3);\n    reservation.endTime = reservation.endTime.slice(0, -3);\n    let columns = getColumnId(reservation);\n    let isMulti = false;\n    if (columns.length > 1) {\n        isMulti = true;\n    }\n    paintColumnsReservated(columns, isMulti, reservation.personId);\n}\n// parse day received from beckand\nfunction parseDay(dateString) {\n    let array = dateString.split("T");\n    const dateObject = new Date(array[0]);\n    let dayIndex = dateObject.getDay();\n    // adjust index, becaus getDay() starts and ends with Sunday\n    dayIndex = (dayIndex + 6) % 7;\n    return dayArray[dayIndex];\n}\n//parse time received from backend\nfunction parseTime(startTime) {\n    let array = startTime.split("T");\n    return array[1];\n}\n// Function to show or hide the rooms\nfunction showRooms() {\n    // Get references to DOM elements\n    var box = document.getElementById("rooms");\n    var changeRoom = document.getElementById("changeRoom");\n    var openPopupButton = document.getElementById("openPopupButton");\n    var oppenCalendarId = document.getElementById("openCalendar");\n    // Check if the rooms are currently shown\n    if (isRoomShown) {\n        // If shown, animate hiding\n        box.style.transform = "translate(100%, -50%)";\n        changeRoom.style.transform = "translate(0%, 0%)";\n        openPopupButton.style.transform = "translate(0%, 0%)";\n        oppenCalendarId.style.transform = "translate(0%, 0%)";\n        // Delay hiding the box until the animation is complete\n        setTimeout(function () {\n            box.style.display = "none";\n        }, 501);\n        isRoomShown = false;\n    }\n    else {\n        box.style.display = "grid";\n        // Delay showing the box until the animation is complete\n        setTimeout(function () {\n            box.style.transform = "translate(0%, -50%)";\n        }, 0);\n        // Move other elements off-screen when showing the rooms\n        changeRoom.style.transform = "translate(-340%, 0%)";\n        openPopupButton.style.transform = "translate(-340%, 0%)";\n        oppenCalendarId.style.transform = "translate(-340%, 0%)";\n        isRoomShown = true;\n    }\n}\nfunction displayRooms() {\n    var box = document.getElementById("rooms");\n    // Clear existing content in the box\n    box.innerHTML = \'\';\n    // Assuming allRooms is an array of strings\n    for (let i = 0; i < rooms.length; i++) {\n        // Use textContent instead of innerHTML\n        var anchor = document.createElement("a");\n        anchor.textContent = rooms[i].name;\n        anchor.id = rooms[i].id + "";\n        let currentRoomId = anchor.id;\n        // set color for selected room\n        if (roomValue === rooms[i].name) {\n            anchor.style.cssText = "color: #f5b963"; // Matching room\n        }\n        else {\n            anchor.style.cssText = "color: #fff"; // Non-matching room\n        }\n        // reload page with correct room\n        anchor.href = `index.html?roomValue=${rooms[i].name}`;\n        box.appendChild(anchor);\n    }\n}\nasync function fetchDataFromUrl(url) {\n    try {\n        const headers = { \'Authorization\': \'Bearer \' + token };\n        //console.log(\'token: \'+ token)\n        //console.log(\'header: \'+headers.Authorization)\n        const response = await fetch(url, { headers });\n        // Check if the request was successful (status code 200)\n        if (response.ok) {\n            const json = await response.json();\n            console.log(json);\n            // Parse the response JSON and return\n            return json;\n        }\n        else {\n            const json = await response.json();\n            console.log(json);\n            // Print an error message if the request was not successful\n            showErrorMessage(`Error: Unable to fetch data. Status code: ${response.status}`);\n            return null;\n        }\n    }\n    catch (error) {\n        // Handle exceptions\n        showErrorMessage(`Error: ${error.message}`);\n        return null;\n    }\n}\nasync function addReservationToDatabase(reservation) {\n    const infoBox = document.getElementById("InfoBox");\n    try {\n        const response = await fetch(url, {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify(reservation)\n        });\n        if (!response.ok) {\n            showErrorMessage(\'Failed to add reservation! Please check your Internet connection!\' + response);\n        }\n    }\n    catch (error) {\n        showErrorMessage(\'Failed to add reservation! Please check your Internet connection!\' + error);\n    }\n    infoBox.style.display = "none";\n}\nasync function removeReservation(reservationId) {\n    try {\n        const response = await fetch(url + `/${reservationId}`, {\n            method: \'DELETE\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n            }\n        });\n        if (!response.ok) {\n            showErrorMessage("Failed to remove Reservation");\n        }\n    }\n    catch (error) {\n        showErrorMessage("Failed to remove Reservation");\n    }\n}\nasync function updateReservationInDatabase(oldReservation, newReservation) {\n    try {\n        const response = await fetch(`${url}/${oldReservation.id}`, {\n            method: \'PUT\', // Assuming you use PUT for updates, adjust if necessary\n            headers: {\n                \'Content-Type\': \'application/json\',\n            },\n            body: JSON.stringify(newReservation),\n        });\n        if (!response.ok) {\n            throw new Error(\'Failed to update reservation\');\n        }\n        // If the response is OK, you can optionally parse the response JSON\n        const result = response.ok;\n        if (!response.ok)\n            showErrorMessage("Error updating reservation:" + await response.text());\n        location.reload();\n    }\n    catch (error) {\n        // Handle any errors that occurred during the fetch operation\n        showErrorMessage(\'Error updating reservation:\' + error.message);\n        // You may choose to rethrow the error or handle it differently based on your requirements\n        throw error;\n    }\n}\nfunction allowDrop(ev) {\n    ev.preventDefault();\n}\nlet oldReservation;\nfunction drag(ev, cellID) {\n    oldReservation = getReservation(cellID);\n    ev.dataTransfer.setData("text", ev.target.id);\n}\nfunction drop(ev, cell) {\n    try {\n        if (!checkIfContains(cell.id)) {\n            updateReservation(oldReservation, cell.id);\n            ev.preventDefault();\n            const data = ev.dataTransfer.getData("text");\n            const draggedElement = document.getElementById(data);\n            if (draggedElement) {\n                ev.target.appendChild(draggedElement);\n            }\n        }\n        else {\n            showErrorMessage("Reservation with same date and time already exists!");\n        }\n    }\n    catch (error) {\n        showErrorMessage(error);\n    }\n}\nfunction checkIfContains(cell) {\n    let array = [];\n    reservations.forEach(res => {\n        let temp = getColumnId(res);\n        temp.forEach(t => {\n            array.push(t);\n        });\n    });\n    return array.some(table => {\n        return table === cell;\n    });\n}\nfunction extractNumbersFromString(inputString) {\n    // Use a regular expression to match digits\n    const matches = inputString.match(/\\d+/g);\n    // Convert the matched strings to numbers\n    const numbers = matches ? matches.map(match => parseInt(match, 10)) : [];\n    return numbers;\n}\nfunction reverseParse(arr, length) {\n    let array = [];\n    array.push(dayAsDateArray[arr[1] - 1]);\n    array.push(parseToLocalDateTimeFormat(dayAsDateArray[arr[1] - 1], startTimeArray[arr[0] - 1]));\n    if (length > 1) {\n        array.push(parseToLocalDateTimeFormat(dayAsDateArray[arr[1] - 1], endTimeArray[arr[0] - 2 + length]));\n    }\n    else {\n        array.push(parseToLocalDateTimeFormat(dayAsDateArray[arr[1] - 1], endTimeArray[arr[0] - 1]));\n    }\n    return array;\n}\nfunction getReservation(cellId) {\n    for (const reservation of reservations) {\n        const temp = getColumnId(reservation);\n        for (const element of temp) {\n            if (element === cellId) {\n                return reservation;\n            }\n        }\n    }\n    return null;\n}\nfunction updateReservation(oldReservation, cell) {\n    let arr = reverseParse(extractNumbersFromString(cell), getColumnId(oldReservation).length);\n    let temp = {\n        roomId: getRoomFromName(roomValue).id,\n        personId: oldReservation.personId,\n        startTime: arr[1],\n        endTime: arr[2],\n        reservationDate: arr[0]\n    };\n    if (isInRange(temp, oldReservation.id)) {\n        throw new Error("reservation is in range of an other!");\n    }\n    reservations.forEach(res => {\n        if (res === oldReservation) {\n            res.startTime = arr[1];\n            res.endTime = arr[2];\n            res.reservationDate = arr[0];\n        }\n    });\n    updateReservationInDatabase(oldReservation, temp);\n}\nfunction showErrorMessage(message) {\n    const errorMessageBox = document.getElementById("errorMessageBox");\n    const errorMessage = document.getElementById("error_message");\n    errorMessageBox.style.display = "block";\n    errorMessage.innerHTML = message;\n    var i = 100;\n    if (i == 100) {\n        i = 99;\n        var elem = document.getElementById("progressBar");\n        var width = 99;\n        var id = setInterval(frame, -10);\n        function frame() {\n            if (width <= 0) {\n                clearInterval(id);\n                i = 100;\n            }\n            else {\n                width -= 0.09;\n                elem.style.width = width + "%";\n            }\n        }\n    }\n    setTimeout(function () {\n        errorMessageBox.style.display = "none";\n        errorMessage.innerHTML = "";\n    }, 4800);\n}\nfunction showReservationInfo(reservation) {\n    const infoBox = document.getElementById("InfoBox");\n    const infoMessage = document.getElementById("info_content");\n    const columnId = getColumnId(reservation);\n    addBorderToReservation(columnId);\n    infoMessage.style.color = "#fff";\n    document.getElementById("remove").remove();\n    document.getElementById("edit").remove();\n    const editButton = document.createElement("button");\n    const removeButton = document.createElement("button");\n    removeButton.innerHTML = "L&ouml;schen";\n    removeButton.id = "remove";\n    editButton.innerHTML = "Bearbeiten";\n    editButton.id = "edit";\n    removeButton.classList.add("button");\n    editButton.classList.add("button");\n    document.querySelector("#InfoBox > *:last-child").appendChild(removeButton);\n    document.querySelector("#InfoBox > *:last-child").appendChild(editButton);\n    infoBox.style.display = "block";\n    infoMessage.innerHTML = reservationToString(reservation);\n    removeButton.addEventListener("click", async () => {\n        const affectedColumns = getColumnId(reservation);\n        removeBorderFromReservation(columnId);\n        affectedColumns.forEach(affectedColumn => {\n            const column = document.getElementById(`${affectedColumn}`);\n            column.innerHTML = "";\n        });\n        infoBox.style.display = "none";\n        await removeReservation(reservation.id);\n        getReservationsFromDatabase();\n    });\n    editButton.addEventListener("click", async () => {\n        const addButton = document.getElementById("submitButton");\n        addButton.innerHTML = "Speichern";\n        infoBox.style.display = "none";\n        removeBorderFromReservation(columnId);\n        olderReservation = reservation;\n        openModalWithOnclick(columnId[0]);\n    });\n    window.addEventListener("click", (event) => {\n        // Close modal when clicking outside of it\n        if (event.target === infoBox) {\n            infoBox.style.display = "none";\n            removeBorderFromReservation(columnId);\n        }\n    });\n}\nfunction addBorderToReservation(columnIds) {\n    if (columnIds.length === 1) {\n        let resColumn = document.getElementById(columnIds[0]);\n        resColumn.style.border = "3px solid #1e444d";\n        let imgId = columnIds[0] + "Img";\n        let img = document.getElementById(imgId);\n        img.style.height = "3.7rem";\n    }\n    else {\n        for (let i = 0; i < columnIds.length; i++) {\n            let resColumn = document.getElementById(columnIds[i]);\n            resColumn.style.border = "3px solid #1e444d";\n            if (i === 0) {\n                resColumn.style.borderBottom = "none";\n            }\n            else if (i < columnIds.length - 1) {\n                resColumn.style.borderBottom = "none";\n                resColumn.style.borderTop = "none";\n            }\n            else {\n                resColumn.style.borderTop = "none";\n            }\n        }\n    }\n}\nfunction removeBorderFromReservation(columnIds) {\n    if (columnIds.length === 1) {\n        let imgId = columnIds[0] + "Img";\n        let img = document.getElementById(imgId);\n        if (img != null) {\n            img.style.height = "3.3rem";\n        }\n    }\n    for (let i = 0; i < columnIds.length; i++) {\n        let resColumn = document.getElementById(columnIds[i]);\n        resColumn.style.border = "0.063rem solid #ccc";\n    }\n}\nfunction reservationToString(reservation) {\n    const person = getPersonFromId(reservation.personId);\n    let result = `\n        <div id="flex">\n            <div class="displayInfo">\n                <h3>${person.surname} ${person.firstname}</h3>\n                <h4 style="margin-top: 0.5rem">Klasse: ${person.grade}</h4>\n            </div>\n            <div class="displayInfo">\n                <h4>Datum: ${reservation.reservationDate}</h4>\n                <h4 style="margin-top: 0.5rem" >Zeit: ${parseTime(reservation.startTime)}-${parseTime(reservation.endTime)}</h4>\n            </div>\n        </div>\n        <h3 style="text-decoration: underline; margin-top: 1rem">E-Mail: ${person.email}</h3>`;\n    return result;\n}\nfunction formatDate(date) {\n    return date.toISOString().slice(0, 10);\n}\nfunction isInRange(update, id) {\n    let array = reservations.filter(item => item.reservationDate === update.reservationDate);\n    const startTimeId = startTimeArray.indexOf(parseTime(update.startTime).slice(0, -3));\n    const endTimeId = endTimeArray.indexOf(parseTime(update.endTime).slice(0, -3));\n    for (const element of array) {\n        if (element.id !== id) {\n            const elementStartTimeId = startTimeArray.indexOf(parseTime(element.startTime));\n            if (elementStartTimeId >= startTimeId && elementStartTimeId <= endTimeId) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nasync function loadPersonsFromDatabase() {\n    const emailSelect = document.getElementById("email");\n    const getUrl = "http://152.67.77.62:8080/api/persons/list";\n    persons = await fetchDataFromUrl(getUrl);\n    console.log("=================== Persons");\n    console.log(persons);\n    try {\n        persons.forEach(singePerson => {\n            const person = {\n                id: singePerson.id,\n                surname: singePerson.surname,\n                firstname: singePerson.firstname,\n                email: singePerson.email,\n                grade: singePerson.grade\n            };\n            persons.push(person);\n        });\n        await getPersonFromFromToken();\n        const option = document.createElement("option");\n        option.value = admin.email + "";\n        option.text = admin.email + "";\n        emailSelect.add(option);\n    }\n    catch (error) {\n        console.log(error);\n    }\n}\n//##################### Wochen Wechsel ########################\nfunction calcNextWeek() {\n    const monday = new Date(localStorage.getItem("date"));\n    const nextMonday = getNextMonday(monday);\n    localStorage.setItem("date", nextMonday + "");\n}\nfunction calcNowWeek() {\n    const nowMonday = getCurrentMonday(new Date);\n    localStorage.setItem("date", nowMonday + "");\n}\nfunction calcPrevWeek() {\n    const monday = new Date(localStorage.getItem("date"));\n    const prevMonday = getPreviousMonday(monday);\n    localStorage.setItem("date", prevMonday + "");\n}\nfunction getNextMonday(inputDate) {\n    const daysUntilNextMonday = (1 + 7 - inputDate.getDay()) % 7;\n    const nextMonday = new Date(inputDate);\n    nextMonday.setDate(inputDate.getDate() + daysUntilNextMonday + 7);\n    nextMonday.setHours(0, 0, 0, 0);\n    return nextMonday;\n}\nfunction getCurrentMonday(d) {\n    d = new Date(d);\n    var day = d.getDay(), diff = d.getDate() - day + (day == 0 ? -6 : 1);\n    return new Date(d.setDate(diff));\n}\nfunction getPreviousMonday(inputDate) {\n    const daysSincePreviousMonday = (inputDate.getDay() + 6) % 7;\n    const previousMonday = new Date(inputDate);\n    previousMonday.setDate(inputDate.getDate() - daysSincePreviousMonday - 6);\n    previousMonday.setHours(0, 0, 0, 0); // Set to the beginning of the day\n    return getCurrentMonday(previousMonday);\n}\nfunction getCurrentWeek(monday) {\n    const weekDates = [];\n    // Set the input date to Monday to ensure consistency\n    monday.setHours(0, 0, 0, 0);\n    const currentDate = new Date(monday);\n    // Iterate from Monday to Friday and add each date to the array\n    for (let i = 0; i < 5; i++) {\n        weekDates.push(parseDateToCalendarFormat(currentDate) + "");\n        currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return weekDates;\n}\nfunction setAndStoreDate() {\n    const currentMonday = getCurrentMonday(new Date);\n    localStorage.setItem("date", "" + currentMonday);\n}\nwindow.onload = function () {\n    const storedDate = localStorage.getItem("date");\n    if (storedDate) {\n        //parse to date object\n        const parsedDate = new Date(storedDate);\n    }\n    else {\n        // if no date found => save in local storage\n        setAndStoreDate();\n    }\n};\nfunction pad(value, length) {\n    return value.toString().length < length\n        ? \'0\'.repeat(length - value.toString().length) + value\n        : value.toString();\n}\nfunction parseDateToCalendarFormat(date) {\n    const day = pad(date.getDate(), 2);\n    const month = pad(date.getMonth() + 1, 2); // Months are 0-based\n    const year = pad(date.getFullYear(), 4);\n    return `${year}-${month}-${day}`;\n}\nconst header = document.querySelector("#calendar h3");\nconst dates = document.querySelector(".dates");\nconst navs = document.querySelectorAll("#prev, #next");\nconst months = [\n    "January",\n    "February",\n    "March",\n    "April",\n    "May",\n    "June",\n    "July",\n    "August",\n    "September",\n    "October",\n    "November",\n    "December",\n];\nlet selectedDate = {\n    year: new Date().getFullYear(),\n    month: new Date().getMonth(),\n    day: new Date().getDate(),\n};\nfunction renderCalendar() {\n    const start = new Date(selectedDate.year, selectedDate.month, 1).getDay();\n    const endDate = new Date(selectedDate.year, selectedDate.month + 1, 0).getDate();\n    const end = new Date(selectedDate.year, selectedDate.month, endDate).getDay();\n    const endDatePrev = new Date(selectedDate.year, selectedDate.month, 0).getDate();\n    let datesHtml = "";\n    for (let i = start; i > 0; i--) {\n        datesHtml += `<li class="inactive">${endDatePrev - i + 1}</li>`;\n    }\n    for (let i = 1; i <= endDate; i++) {\n        let className = i === selectedDate.day && selectedDate.month === new Date().getMonth() && selectedDate.year === new Date().getFullYear()\n            ? \' class="today"\'\n            : "";\n        datesHtml += `<li ${className}>${i}</li>`;\n    }\n    for (let i = end; i < 6; i++) {\n        datesHtml += `<li class="inactive">${i - end + 1}</li>`;\n    }\n    if (dates) {\n        dates.innerHTML = datesHtml;\n        // Select all li elements inside the dates element\n        const dateItems = dates.querySelectorAll("li");\n        // Add event listener to each date item\n        dateItems.forEach((item, index) => {\n            if (index < start || index >= start + endDate) {\n                return; // Skip inactive dates\n            }\n            item.addEventListener("click", () => {\n                setSelectedDate(selectedDate.year, selectedDate.month, index - start + 1);\n            });\n        });\n    }\n    if (header) {\n        header.textContent = `${months[selectedDate.month]} ${selectedDate.year}`;\n    }\n}\nfunction setSelectedDate(year, month, day) {\n    let newWeek = "";\n    const lastDayOfMonth = new Date(year, month + 1, 0).getDate();\n    if (day > lastDayOfMonth) {\n        day = lastDayOfMonth;\n    }\n    const selectedDateObject = new Date(year, month, day);\n    const dayOfWeek = selectedDateObject.getDay();\n    const mondayOfTheWeek = new Date(selectedDateObject);\n    mondayOfTheWeek.setDate(selectedDateObject.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1));\n    // Update your selectedDate object or perform any other actions as needed\n    selectedDate = {\n        year: mondayOfTheWeek.getFullYear(),\n        month: mondayOfTheWeek.getMonth(),\n        day: mondayOfTheWeek.getDate(),\n    };\n    newWeek = mondayOfTheWeek.toDateString() + " 00:00:00 GMT+0100 (Central European Standard Time)";\n    localStorage.setItem("date", newWeek + "");\n    location.reload();\n    closeCalendar();\n}\nnavs.forEach((nav) => {\n    nav.addEventListener("click", (e) => {\n        const btnId = e.target.id;\n        if (btnId === "prev" && selectedDate.month === 0) {\n            selectedDate.year--;\n            selectedDate.month = 11;\n        }\n        else if (btnId === "next" && selectedDate.month === 11) {\n            selectedDate.year++;\n            selectedDate.month = 0;\n        }\n        else {\n            selectedDate.month = btnId === "next" ? selectedDate.month + 1 : selectedDate.month - 1;\n        }\n        renderCalendar();\n    });\n});\nrenderCalendar();\nfunction openCalendar() {\n    if (isCalendarShown) {\n        closeCalendar();\n    }\n    else {\n        isCalendarShown = true;\n        let calendarElement = document.getElementById(\'calendar\');\n        calendarElement.style.display = \'block\';\n    }\n}\nfunction closeCalendar() {\n    isCalendarShown = false;\n    let calendarElement = document.getElementById(\'calendar\');\n    calendarElement.style.display = \'none\';\n}\nasync function getRoomsFromDatabase() {\n    const getUrl = "http://152.67.77.62:8080/api/rooms/list";\n    try {\n        const response = await fetch(getUrl);\n        if (!response.ok) {\n            throw new Error("Failed to fetch room data");\n        }\n        const data = await response.json();\n        if (data) {\n            data.forEach(singleRoom => {\n                const room = {\n                    id: singleRoom.id,\n                    name: singleRoom.name,\n                    description: singleRoom.description\n                };\n                rooms.push(room);\n            });\n        }\n        displayRooms();\n    }\n    catch (error) {\n        showErrorMessage(error.message);\n    }\n}\nasync function getPersonFromFromToken() {\n    const getUrl = "http://152.67.77.62:8080/api/persons/token";\n    const res = await fetchDataFromUrl(getUrl);\n    console.log(")================ Get user");\n    console.log(res);\n    admin = res;\n    admin.grade = \'admin\';\n}\nfunction getRoomFromName(roomName) {\n    let result;\n    rooms.forEach(room => {\n        if (room.name === roomName) {\n            result = room;\n        }\n    });\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///859\n')},822:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// UNUSED EXPORTS: token\n\n// EXTERNAL MODULE: ../../node_modules/base64-js/index.js\nvar base64_js = __webpack_require__(991);\n// EXTERNAL MODULE: ../../node_modules/js-sha256/src/sha256.js\nvar sha256 = __webpack_require__(235);\n;// CONCATENATED MODULE: ../../node_modules/jwt-decode/build/esm/index.js\nclass InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nfunction jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n\n;// CONCATENATED MODULE: ../../node_modules/keycloak-js/dist/keycloak.mjs\n\n\n\n\n/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nif (typeof Promise === 'undefined') {\n    throw Error('Keycloak requires an environment that supports Promises. Make sure that you include the appropriate polyfill.');\n}\n\nfunction Keycloak (config) {\n    if (!(this instanceof Keycloak)) {\n        throw new Error(\"The 'Keycloak' constructor must be invoked with 'new'.\")\n    }\n\n    var kc = this;\n    var adapter;\n    var refreshQueue = [];\n    var callbackStorage;\n\n    var loginIframe = {\n        enable: true,\n        callbackList: [],\n        interval: 5\n    };\n\n    var scripts = document.getElementsByTagName('script');\n    for (var i = 0; i < scripts.length; i++) {\n        if ((scripts[i].src.indexOf('keycloak.js') !== -1 || scripts[i].src.indexOf('keycloak.min.js') !== -1) && scripts[i].src.indexOf('version=') !== -1) {\n            kc.iframeVersion = scripts[i].src.substring(scripts[i].src.indexOf('version=') + 8).split('&')[0];\n        }\n    }\n\n    var useNonce = true;\n    var logInfo = createLogger(console.info);\n    var logWarn = createLogger(console.warn);\n\n    kc.init = function (initOptions) {\n        if (kc.didInitialize) {\n            throw new Error(\"A 'Keycloak' instance can only be initialized once.\");\n        }\n\n        kc.didInitialize = true;\n\n        kc.authenticated = false;\n\n        callbackStorage = createCallbackStorage();\n        var adapters = ['default', 'cordova', 'cordova-native'];\n\n        if (initOptions && adapters.indexOf(initOptions.adapter) > -1) {\n            adapter = loadAdapter(initOptions.adapter);\n        } else if (initOptions && typeof initOptions.adapter === \"object\") {\n            adapter = initOptions.adapter;\n        } else {\n            if (window.Cordova || window.cordova) {\n                adapter = loadAdapter('cordova');\n            } else {\n                adapter = loadAdapter();\n            }\n        }\n\n        if (initOptions) {\n            if (typeof initOptions.useNonce !== 'undefined') {\n                useNonce = initOptions.useNonce;\n            }\n\n            if (typeof initOptions.checkLoginIframe !== 'undefined') {\n                loginIframe.enable = initOptions.checkLoginIframe;\n            }\n\n            if (initOptions.checkLoginIframeInterval) {\n                loginIframe.interval = initOptions.checkLoginIframeInterval;\n            }\n\n            if (initOptions.onLoad === 'login-required') {\n                kc.loginRequired = true;\n            }\n\n            if (initOptions.responseMode) {\n                if (initOptions.responseMode === 'query' || initOptions.responseMode === 'fragment') {\n                    kc.responseMode = initOptions.responseMode;\n                } else {\n                    throw 'Invalid value for responseMode';\n                }\n            }\n\n            if (initOptions.flow) {\n                switch (initOptions.flow) {\n                    case 'standard':\n                        kc.responseType = 'code';\n                        break;\n                    case 'implicit':\n                        kc.responseType = 'id_token token';\n                        break;\n                    case 'hybrid':\n                        kc.responseType = 'code id_token token';\n                        break;\n                    default:\n                        throw 'Invalid value for flow';\n                }\n                kc.flow = initOptions.flow;\n            }\n\n            if (initOptions.timeSkew != null) {\n                kc.timeSkew = initOptions.timeSkew;\n            }\n\n            if(initOptions.redirectUri) {\n                kc.redirectUri = initOptions.redirectUri;\n            }\n\n            if (initOptions.silentCheckSsoRedirectUri) {\n                kc.silentCheckSsoRedirectUri = initOptions.silentCheckSsoRedirectUri;\n            }\n\n            if (typeof initOptions.silentCheckSsoFallback === 'boolean') {\n                kc.silentCheckSsoFallback = initOptions.silentCheckSsoFallback;\n            } else {\n                kc.silentCheckSsoFallback = true;\n            }\n\n            if (initOptions.pkceMethod) {\n                if (initOptions.pkceMethod !== \"S256\") {\n                    throw 'Invalid value for pkceMethod';\n                }\n                kc.pkceMethod = initOptions.pkceMethod;\n            }\n\n            if (typeof initOptions.enableLogging === 'boolean') {\n                kc.enableLogging = initOptions.enableLogging;\n            } else {\n                kc.enableLogging = false;\n            }\n\n            if (typeof initOptions.scope === 'string') {\n                kc.scope = initOptions.scope;\n            }\n\n            if (typeof initOptions.acrValues === 'string') {\n                kc.acrValues = initOptions.acrValues;\n            }\n\n            if (typeof initOptions.messageReceiveTimeout === 'number' && initOptions.messageReceiveTimeout > 0) {\n                kc.messageReceiveTimeout = initOptions.messageReceiveTimeout;\n            } else {\n                kc.messageReceiveTimeout = 10000;\n            }\n        }\n\n        if (!kc.responseMode) {\n            kc.responseMode = 'fragment';\n        }\n        if (!kc.responseType) {\n            kc.responseType = 'code';\n            kc.flow = 'standard';\n        }\n\n        var promise = createPromise();\n\n        var initPromise = createPromise();\n        initPromise.promise.then(function() {\n            kc.onReady && kc.onReady(kc.authenticated);\n            promise.setSuccess(kc.authenticated);\n        }).catch(function(error) {\n            promise.setError(error);\n        });\n\n        var configPromise = loadConfig();\n\n        function onLoad() {\n            var doLogin = function(prompt) {\n                if (!prompt) {\n                    options.prompt = 'none';\n                }\n\n                if (initOptions && initOptions.locale) {\n                    options.locale = initOptions.locale;\n                }\n                kc.login(options).then(function () {\n                    initPromise.setSuccess();\n                }).catch(function (error) {\n                    initPromise.setError(error);\n                });\n            };\n\n            var checkSsoSilently = function() {\n                var ifrm = document.createElement(\"iframe\");\n                var src = kc.createLoginUrl({prompt: 'none', redirectUri: kc.silentCheckSsoRedirectUri});\n                ifrm.setAttribute(\"src\", src);\n                ifrm.setAttribute(\"sandbox\", \"allow-storage-access-by-user-activation allow-scripts allow-same-origin\");\n                ifrm.setAttribute(\"title\", \"keycloak-silent-check-sso\");\n                ifrm.style.display = \"none\";\n                document.body.appendChild(ifrm);\n\n                var messageCallback = function(event) {\n                    if (event.origin !== window.location.origin || ifrm.contentWindow !== event.source) {\n                        return;\n                    }\n\n                    var oauth = parseCallback(event.data);\n                    processCallback(oauth, initPromise);\n\n                    document.body.removeChild(ifrm);\n                    window.removeEventListener(\"message\", messageCallback);\n                };\n\n                window.addEventListener(\"message\", messageCallback);\n            };\n\n            var options = {};\n            switch (initOptions.onLoad) {\n                case 'check-sso':\n                    if (loginIframe.enable) {\n                        setupCheckLoginIframe().then(function() {\n                            checkLoginIframe().then(function (unchanged) {\n                                if (!unchanged) {\n                                    kc.silentCheckSsoRedirectUri ? checkSsoSilently() : doLogin(false);\n                                } else {\n                                    initPromise.setSuccess();\n                                }\n                            }).catch(function (error) {\n                                initPromise.setError(error);\n                            });\n                        });\n                    } else {\n                        kc.silentCheckSsoRedirectUri ? checkSsoSilently() : doLogin(false);\n                    }\n                    break;\n                case 'login-required':\n                    doLogin(true);\n                    break;\n                default:\n                    throw 'Invalid value for onLoad';\n            }\n        }\n\n        function processInit() {\n            var callback = parseCallback(window.location.href);\n\n            if (callback) {\n                window.history.replaceState(window.history.state, null, callback.newUrl);\n            }\n\n            if (callback && callback.valid) {\n                return setupCheckLoginIframe().then(function() {\n                    processCallback(callback, initPromise);\n                }).catch(function (error) {\n                    initPromise.setError(error);\n                });\n            } else if (initOptions) {\n                if (initOptions.token && initOptions.refreshToken) {\n                    setToken(initOptions.token, initOptions.refreshToken, initOptions.idToken);\n\n                    if (loginIframe.enable) {\n                        setupCheckLoginIframe().then(function() {\n                            checkLoginIframe().then(function (unchanged) {\n                                if (unchanged) {\n                                    kc.onAuthSuccess && kc.onAuthSuccess();\n                                    initPromise.setSuccess();\n                                    scheduleCheckIframe();\n                                } else {\n                                    initPromise.setSuccess();\n                                }\n                            }).catch(function (error) {\n                                initPromise.setError(error);\n                            });\n                        });\n                    } else {\n                        kc.updateToken(-1).then(function() {\n                            kc.onAuthSuccess && kc.onAuthSuccess();\n                            initPromise.setSuccess();\n                        }).catch(function(error) {\n                            kc.onAuthError && kc.onAuthError();\n                            if (initOptions.onLoad) {\n                                onLoad();\n                            } else {\n                                initPromise.setError(error);\n                            }\n                        });\n                    }\n                } else if (initOptions.onLoad) {\n                    onLoad();\n                } else {\n                    initPromise.setSuccess();\n                }\n            } else {\n                initPromise.setSuccess();\n            }\n        }\n\n        function domReady() {\n            var promise = createPromise();\n\n            var checkReadyState = function () {\n                if (document.readyState === 'interactive' || document.readyState === 'complete') {\n                    document.removeEventListener('readystatechange', checkReadyState);\n                    promise.setSuccess();\n                }\n            };\n            document.addEventListener('readystatechange', checkReadyState);\n\n            checkReadyState(); // just in case the event was already fired and we missed it (in case the init is done later than at the load time, i.e. it's done from code)\n\n            return promise.promise;\n        }\n\n        configPromise.then(function () {\n            domReady()\n                .then(check3pCookiesSupported)\n                .then(processInit)\n                .catch(function (error) {\n                    promise.setError(error);\n                });\n        });\n        configPromise.catch(function (error) {\n            promise.setError(error);\n        });\n\n        return promise.promise;\n    };\n\n    kc.login = function (options) {\n        return adapter.login(options);\n    };\n\n    function generateRandomData(len) {\n        // use web crypto APIs if possible\n        var array = null;\n        var crypto = window.crypto || window.msCrypto;\n        if (crypto && crypto.getRandomValues && window.Uint8Array) {\n            array = new Uint8Array(len);\n            crypto.getRandomValues(array);\n            return array;\n        }\n\n        // fallback to Math random\n        array = new Array(len);\n        for (var j = 0; j < array.length; j++) {\n            array[j] = Math.floor(256 * Math.random());\n        }\n        return array;\n    }\n\n    function generateCodeVerifier(len) {\n        return generateRandomString(len, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789');\n    }\n\n    function generateRandomString(len, alphabet){\n        var randomData = generateRandomData(len);\n        var chars = new Array(len);\n        for (var i = 0; i < len; i++) {\n            chars[i] = alphabet.charCodeAt(randomData[i] % alphabet.length);\n        }\n        return String.fromCharCode.apply(null, chars);\n    }\n\n    function generatePkceChallenge(pkceMethod, codeVerifier) {\n        switch (pkceMethod) {\n            // The use of the \"plain\" method is considered insecure and therefore not supported.\n            case \"S256\":\n                // hash codeVerifier, then encode as url-safe base64 without padding\n                var hashBytes = new Uint8Array(sha256.arrayBuffer(codeVerifier));\n                var encodedHash = base64_js.fromByteArray(hashBytes)\n                    .replace(/\\+/g, '-')\n                    .replace(/\\//g, '_')\n                    .replace(/\\=/g, '');\n                return encodedHash;\n            default:\n                throw 'Invalid value for pkceMethod';\n        }\n    }\n\n    function buildClaimsParameter(requestedAcr){\n        var claims = {\n            id_token: {\n                acr: requestedAcr\n            }\n        };\n        return JSON.stringify(claims);\n    }\n\n    kc.createLoginUrl = function(options) {\n        var state = createUUID();\n        var nonce = createUUID();\n\n        var redirectUri = adapter.redirectUri(options);\n\n        var callbackState = {\n            state: state,\n            nonce: nonce,\n            redirectUri: encodeURIComponent(redirectUri)\n        };\n\n        if (options && options.prompt) {\n            callbackState.prompt = options.prompt;\n        }\n\n        var baseUrl;\n        if (options && options.action == 'register') {\n            baseUrl = kc.endpoints.register();\n        } else {\n            baseUrl = kc.endpoints.authorize();\n        }\n\n        var scope = options && options.scope || kc.scope;\n        if (!scope) {\n            // if scope is not set, default to \"openid\"\n            scope = \"openid\";\n        } else if (scope.indexOf(\"openid\") === -1) {\n            // if openid scope is missing, prefix the given scopes with it\n            scope = \"openid \" + scope;\n        }\n\n        var url = baseUrl\n            + '?client_id=' + encodeURIComponent(kc.clientId)\n            + '&redirect_uri=' + encodeURIComponent(redirectUri)\n            + '&state=' + encodeURIComponent(state)\n            + '&response_mode=' + encodeURIComponent(kc.responseMode)\n            + '&response_type=' + encodeURIComponent(kc.responseType)\n            + '&scope=' + encodeURIComponent(scope);\n        if (useNonce) {\n            url = url + '&nonce=' + encodeURIComponent(nonce);\n        }\n\n        if (options && options.prompt) {\n            url += '&prompt=' + encodeURIComponent(options.prompt);\n        }\n\n        if (options && options.maxAge) {\n            url += '&max_age=' + encodeURIComponent(options.maxAge);\n        }\n\n        if (options && options.loginHint) {\n            url += '&login_hint=' + encodeURIComponent(options.loginHint);\n        }\n\n        if (options && options.idpHint) {\n            url += '&kc_idp_hint=' + encodeURIComponent(options.idpHint);\n        }\n\n        if (options && options.action && options.action != 'register') {\n            url += '&kc_action=' + encodeURIComponent(options.action);\n        }\n\n        if (options && options.locale) {\n            url += '&ui_locales=' + encodeURIComponent(options.locale);\n        }\n\n        if (options && options.acr) {\n            var claimsParameter = buildClaimsParameter(options.acr);\n            url += '&claims=' + encodeURIComponent(claimsParameter);\n        }\n\n        if ((options && options.acrValues) || kc.acrValues) {\n            url += '&acr_values=' + encodeURIComponent(options.acrValues || kc.acrValues);\n        }\n\n        if (kc.pkceMethod) {\n            var codeVerifier = generateCodeVerifier(96);\n            callbackState.pkceCodeVerifier = codeVerifier;\n            var pkceChallenge = generatePkceChallenge(kc.pkceMethod, codeVerifier);\n            url += '&code_challenge=' + pkceChallenge;\n            url += '&code_challenge_method=' + kc.pkceMethod;\n        }\n\n        callbackStorage.add(callbackState);\n\n        return url;\n    };\n\n    kc.logout = function(options) {\n        return adapter.logout(options);\n    };\n\n    kc.createLogoutUrl = function(options) {\n        var url = kc.endpoints.logout()\n            + '?client_id=' + encodeURIComponent(kc.clientId)\n            + '&post_logout_redirect_uri=' + encodeURIComponent(adapter.redirectUri(options, false));\n\n        if (kc.idToken) {\n            url += '&id_token_hint=' + encodeURIComponent(kc.idToken);\n        }\n\n        return url;\n    };\n\n    kc.register = function (options) {\n        return adapter.register(options);\n    };\n\n    kc.createRegisterUrl = function(options) {\n        if (!options) {\n            options = {};\n        }\n        options.action = 'register';\n        return kc.createLoginUrl(options);\n    };\n\n    kc.createAccountUrl = function(options) {\n        var realm = getRealmUrl();\n        var url = undefined;\n        if (typeof realm !== 'undefined') {\n            url = realm\n            + '/account'\n            + '?referrer=' + encodeURIComponent(kc.clientId)\n            + '&referrer_uri=' + encodeURIComponent(adapter.redirectUri(options));\n        }\n        return url;\n    };\n\n    kc.accountManagement = function() {\n        return adapter.accountManagement();\n    };\n\n    kc.hasRealmRole = function (role) {\n        var access = kc.realmAccess;\n        return !!access && access.roles.indexOf(role) >= 0;\n    };\n\n    kc.hasResourceRole = function(role, resource) {\n        if (!kc.resourceAccess) {\n            return false;\n        }\n\n        var access = kc.resourceAccess[resource || kc.clientId];\n        return !!access && access.roles.indexOf(role) >= 0;\n    };\n\n    kc.loadUserProfile = function() {\n        var url = getRealmUrl() + '/account';\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.setRequestHeader('Accept', 'application/json');\n        req.setRequestHeader('Authorization', 'bearer ' + kc.token);\n\n        var promise = createPromise();\n\n        req.onreadystatechange = function () {\n            if (req.readyState == 4) {\n                if (req.status == 200) {\n                    kc.profile = JSON.parse(req.responseText);\n                    promise.setSuccess(kc.profile);\n                } else {\n                    promise.setError();\n                }\n            }\n        };\n\n        req.send();\n\n        return promise.promise;\n    };\n\n    kc.loadUserInfo = function() {\n        var url = kc.endpoints.userinfo();\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.setRequestHeader('Accept', 'application/json');\n        req.setRequestHeader('Authorization', 'bearer ' + kc.token);\n\n        var promise = createPromise();\n\n        req.onreadystatechange = function () {\n            if (req.readyState == 4) {\n                if (req.status == 200) {\n                    kc.userInfo = JSON.parse(req.responseText);\n                    promise.setSuccess(kc.userInfo);\n                } else {\n                    promise.setError();\n                }\n            }\n        };\n\n        req.send();\n\n        return promise.promise;\n    };\n\n    kc.isTokenExpired = function(minValidity) {\n        if (!kc.tokenParsed || (!kc.refreshToken && kc.flow != 'implicit' )) {\n            throw 'Not authenticated';\n        }\n\n        if (kc.timeSkew == null) {\n            logInfo('[KEYCLOAK] Unable to determine if token is expired as timeskew is not set');\n            return true;\n        }\n\n        var expiresIn = kc.tokenParsed['exp'] - Math.ceil(new Date().getTime() / 1000) + kc.timeSkew;\n        if (minValidity) {\n            if (isNaN(minValidity)) {\n                throw 'Invalid minValidity';\n            }\n            expiresIn -= minValidity;\n        }\n        return expiresIn < 0;\n    };\n\n    kc.updateToken = function(minValidity) {\n        var promise = createPromise();\n\n        if (!kc.refreshToken) {\n            promise.setError();\n            return promise.promise;\n        }\n\n        minValidity = minValidity || 5;\n\n        var exec = function() {\n            var refreshToken = false;\n            if (minValidity == -1) {\n                refreshToken = true;\n                logInfo('[KEYCLOAK] Refreshing token: forced refresh');\n            } else if (!kc.tokenParsed || kc.isTokenExpired(minValidity)) {\n                refreshToken = true;\n                logInfo('[KEYCLOAK] Refreshing token: token expired');\n            }\n\n            if (!refreshToken) {\n                promise.setSuccess(false);\n            } else {\n                var params = 'grant_type=refresh_token&' + 'refresh_token=' + kc.refreshToken;\n                var url = kc.endpoints.token();\n\n                refreshQueue.push(promise);\n\n                if (refreshQueue.length == 1) {\n                    var req = new XMLHttpRequest();\n                    req.open('POST', url, true);\n                    req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n                    req.withCredentials = true;\n\n                    params += '&client_id=' + encodeURIComponent(kc.clientId);\n\n                    var timeLocal = new Date().getTime();\n\n                    req.onreadystatechange = function () {\n                        if (req.readyState == 4) {\n                            if (req.status == 200) {\n                                logInfo('[KEYCLOAK] Token refreshed');\n\n                                timeLocal = (timeLocal + new Date().getTime()) / 2;\n\n                                var tokenResponse = JSON.parse(req.responseText);\n\n                                setToken(tokenResponse['access_token'], tokenResponse['refresh_token'], tokenResponse['id_token'], timeLocal);\n\n                                kc.onAuthRefreshSuccess && kc.onAuthRefreshSuccess();\n                                for (var p = refreshQueue.pop(); p != null; p = refreshQueue.pop()) {\n                                    p.setSuccess(true);\n                                }\n                            } else {\n                                logWarn('[KEYCLOAK] Failed to refresh token');\n\n                                if (req.status == 400) {\n                                    kc.clearToken();\n                                }\n\n                                kc.onAuthRefreshError && kc.onAuthRefreshError();\n                                for (var p = refreshQueue.pop(); p != null; p = refreshQueue.pop()) {\n                                    p.setError(true);\n                                }\n                            }\n                        }\n                    };\n\n                    req.send(params);\n                }\n            }\n        };\n\n        if (loginIframe.enable) {\n            var iframePromise = checkLoginIframe();\n            iframePromise.then(function() {\n                exec();\n            }).catch(function(error) {\n                promise.setError(error);\n            });\n        } else {\n            exec();\n        }\n\n        return promise.promise;\n    };\n\n    kc.clearToken = function() {\n        if (kc.token) {\n            setToken(null, null, null);\n            kc.onAuthLogout && kc.onAuthLogout();\n            if (kc.loginRequired) {\n                kc.login();\n            }\n        }\n    };\n\n    function getRealmUrl() {\n        if (typeof kc.authServerUrl !== 'undefined') {\n            if (kc.authServerUrl.charAt(kc.authServerUrl.length - 1) == '/') {\n                return kc.authServerUrl + 'realms/' + encodeURIComponent(kc.realm);\n            } else {\n                return kc.authServerUrl + '/realms/' + encodeURIComponent(kc.realm);\n            }\n        } else {\n            return undefined;\n        }\n    }\n\n    function getOrigin() {\n        if (!window.location.origin) {\n            return window.location.protocol + \"//\" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');\n        } else {\n            return window.location.origin;\n        }\n    }\n\n    function processCallback(oauth, promise) {\n        var code = oauth.code;\n        var error = oauth.error;\n        var prompt = oauth.prompt;\n\n        var timeLocal = new Date().getTime();\n\n        if (oauth['kc_action_status']) {\n            kc.onActionUpdate && kc.onActionUpdate(oauth['kc_action_status']);\n        }\n\n        if (error) {\n            if (prompt != 'none') {\n                var errorData = { error: error, error_description: oauth.error_description };\n                kc.onAuthError && kc.onAuthError(errorData);\n                promise && promise.setError(errorData);\n            } else {\n                promise && promise.setSuccess();\n            }\n            return;\n        } else if ((kc.flow != 'standard') && (oauth.access_token || oauth.id_token)) {\n            authSuccess(oauth.access_token, null, oauth.id_token, true);\n        }\n\n        if ((kc.flow != 'implicit') && code) {\n            var params = 'code=' + code + '&grant_type=authorization_code';\n            var url = kc.endpoints.token();\n\n            var req = new XMLHttpRequest();\n            req.open('POST', url, true);\n            req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n\n            params += '&client_id=' + encodeURIComponent(kc.clientId);\n            params += '&redirect_uri=' + oauth.redirectUri;\n\n            if (oauth.pkceCodeVerifier) {\n                params += '&code_verifier=' + oauth.pkceCodeVerifier;\n            }\n\n            req.withCredentials = true;\n\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    if (req.status == 200) {\n\n                        var tokenResponse = JSON.parse(req.responseText);\n                        authSuccess(tokenResponse['access_token'], tokenResponse['refresh_token'], tokenResponse['id_token'], kc.flow === 'standard');\n                        scheduleCheckIframe();\n                    } else {\n                        kc.onAuthError && kc.onAuthError();\n                        promise && promise.setError();\n                    }\n                }\n            };\n\n            req.send(params);\n        }\n\n        function authSuccess(accessToken, refreshToken, idToken, fulfillPromise) {\n            timeLocal = (timeLocal + new Date().getTime()) / 2;\n\n            setToken(accessToken, refreshToken, idToken, timeLocal);\n\n            if (useNonce && ((kc.tokenParsed && kc.tokenParsed.nonce != oauth.storedNonce) ||\n                (kc.refreshTokenParsed && kc.refreshTokenParsed.nonce != oauth.storedNonce) ||\n                (kc.idTokenParsed && kc.idTokenParsed.nonce != oauth.storedNonce))) {\n\n                logInfo('[KEYCLOAK] Invalid nonce, clearing token');\n                kc.clearToken();\n                promise && promise.setError();\n            } else {\n                if (fulfillPromise) {\n                    kc.onAuthSuccess && kc.onAuthSuccess();\n                    promise && promise.setSuccess();\n                }\n            }\n        }\n\n    }\n\n    function loadConfig(url) {\n        var promise = createPromise();\n        var configUrl;\n\n        if (!config) {\n            configUrl = 'keycloak.json';\n        } else if (typeof config === 'string') {\n            configUrl = config;\n        }\n\n        function setupOidcEndoints(oidcConfiguration) {\n            if (! oidcConfiguration) {\n                kc.endpoints = {\n                    authorize: function() {\n                        return getRealmUrl() + '/protocol/openid-connect/auth';\n                    },\n                    token: function() {\n                        return getRealmUrl() + '/protocol/openid-connect/token';\n                    },\n                    logout: function() {\n                        return getRealmUrl() + '/protocol/openid-connect/logout';\n                    },\n                    checkSessionIframe: function() {\n                        var src = getRealmUrl() + '/protocol/openid-connect/login-status-iframe.html';\n                        if (kc.iframeVersion) {\n                            src = src + '?version=' + kc.iframeVersion;\n                        }\n                        return src;\n                    },\n                    thirdPartyCookiesIframe: function() {\n                        var src = getRealmUrl() + '/protocol/openid-connect/3p-cookies/step1.html';\n                        if (kc.iframeVersion) {\n                            src = src + '?version=' + kc.iframeVersion;\n                        }\n                        return src;\n                    },\n                    register: function() {\n                        return getRealmUrl() + '/protocol/openid-connect/registrations';\n                    },\n                    userinfo: function() {\n                        return getRealmUrl() + '/protocol/openid-connect/userinfo';\n                    }\n                };\n            } else {\n                kc.endpoints = {\n                    authorize: function() {\n                        return oidcConfiguration.authorization_endpoint;\n                    },\n                    token: function() {\n                        return oidcConfiguration.token_endpoint;\n                    },\n                    logout: function() {\n                        if (!oidcConfiguration.end_session_endpoint) {\n                            throw \"Not supported by the OIDC server\";\n                        }\n                        return oidcConfiguration.end_session_endpoint;\n                    },\n                    checkSessionIframe: function() {\n                        if (!oidcConfiguration.check_session_iframe) {\n                            throw \"Not supported by the OIDC server\";\n                        }\n                        return oidcConfiguration.check_session_iframe;\n                    },\n                    register: function() {\n                        throw 'Redirection to \"Register user\" page not supported in standard OIDC mode';\n                    },\n                    userinfo: function() {\n                        if (!oidcConfiguration.userinfo_endpoint) {\n                            throw \"Not supported by the OIDC server\";\n                        }\n                        return oidcConfiguration.userinfo_endpoint;\n                    }\n                };\n            }\n        }\n\n        if (configUrl) {\n            var req = new XMLHttpRequest();\n            req.open('GET', configUrl, true);\n            req.setRequestHeader('Accept', 'application/json');\n\n            req.onreadystatechange = function () {\n                if (req.readyState == 4) {\n                    if (req.status == 200 || fileLoaded(req)) {\n                        var config = JSON.parse(req.responseText);\n\n                        kc.authServerUrl = config['auth-server-url'];\n                        kc.realm = config['realm'];\n                        kc.clientId = config['resource'];\n                        setupOidcEndoints(null);\n                        promise.setSuccess();\n                    } else {\n                        promise.setError();\n                    }\n                }\n            };\n\n            req.send();\n        } else {\n            if (!config.clientId) {\n                throw 'clientId missing';\n            }\n\n            kc.clientId = config.clientId;\n\n            var oidcProvider = config['oidcProvider'];\n            if (!oidcProvider) {\n                if (!config['url']) {\n                    var scripts = document.getElementsByTagName('script');\n                    for (var i = 0; i < scripts.length; i++) {\n                        if (scripts[i].src.match(/.*keycloak\\.js/)) {\n                            config.url = scripts[i].src.substr(0, scripts[i].src.indexOf('/js/keycloak.js'));\n                            break;\n                        }\n                    }\n                }\n                if (!config.realm) {\n                    throw 'realm missing';\n                }\n\n                kc.authServerUrl = config.url;\n                kc.realm = config.realm;\n                setupOidcEndoints(null);\n                promise.setSuccess();\n            } else {\n                if (typeof oidcProvider === 'string') {\n                    var oidcProviderConfigUrl;\n                    if (oidcProvider.charAt(oidcProvider.length - 1) == '/') {\n                        oidcProviderConfigUrl = oidcProvider + '.well-known/openid-configuration';\n                    } else {\n                        oidcProviderConfigUrl = oidcProvider + '/.well-known/openid-configuration';\n                    }\n                    var req = new XMLHttpRequest();\n                    req.open('GET', oidcProviderConfigUrl, true);\n                    req.setRequestHeader('Accept', 'application/json');\n\n                    req.onreadystatechange = function () {\n                        if (req.readyState == 4) {\n                            if (req.status == 200 || fileLoaded(req)) {\n                                var oidcProviderConfig = JSON.parse(req.responseText);\n                                setupOidcEndoints(oidcProviderConfig);\n                                promise.setSuccess();\n                            } else {\n                                promise.setError();\n                            }\n                        }\n                    };\n\n                    req.send();\n                } else {\n                    setupOidcEndoints(oidcProvider);\n                    promise.setSuccess();\n                }\n            }\n        }\n\n        return promise.promise;\n    }\n\n    function fileLoaded(xhr) {\n        return xhr.status == 0 && xhr.responseText && xhr.responseURL.startsWith('file:');\n    }\n\n    function setToken(token, refreshToken, idToken, timeLocal) {\n        if (kc.tokenTimeoutHandle) {\n            clearTimeout(kc.tokenTimeoutHandle);\n            kc.tokenTimeoutHandle = null;\n        }\n\n        if (refreshToken) {\n            kc.refreshToken = refreshToken;\n            kc.refreshTokenParsed = jwtDecode(refreshToken);\n        } else {\n            delete kc.refreshToken;\n            delete kc.refreshTokenParsed;\n        }\n\n        if (idToken) {\n            kc.idToken = idToken;\n            kc.idTokenParsed = jwtDecode(idToken);\n        } else {\n            delete kc.idToken;\n            delete kc.idTokenParsed;\n        }\n\n        if (token) {\n            kc.token = token;\n            kc.tokenParsed = jwtDecode(token);\n            kc.sessionId = kc.tokenParsed.session_state;\n            kc.authenticated = true;\n            kc.subject = kc.tokenParsed.sub;\n            kc.realmAccess = kc.tokenParsed.realm_access;\n            kc.resourceAccess = kc.tokenParsed.resource_access;\n\n            if (timeLocal) {\n                kc.timeSkew = Math.floor(timeLocal / 1000) - kc.tokenParsed.iat;\n            }\n\n            if (kc.timeSkew != null) {\n                logInfo('[KEYCLOAK] Estimated time difference between browser and server is ' + kc.timeSkew + ' seconds');\n\n                if (kc.onTokenExpired) {\n                    var expiresIn = (kc.tokenParsed['exp'] - (new Date().getTime() / 1000) + kc.timeSkew) * 1000;\n                    logInfo('[KEYCLOAK] Token expires in ' + Math.round(expiresIn / 1000) + ' s');\n                    if (expiresIn <= 0) {\n                        kc.onTokenExpired();\n                    } else {\n                        kc.tokenTimeoutHandle = setTimeout(kc.onTokenExpired, expiresIn);\n                    }\n                }\n            }\n        } else {\n            delete kc.token;\n            delete kc.tokenParsed;\n            delete kc.subject;\n            delete kc.realmAccess;\n            delete kc.resourceAccess;\n\n            kc.authenticated = false;\n        }\n    }\n\n    function createUUID() {\n        var hexDigits = '0123456789abcdef';\n        var s = generateRandomString(36, hexDigits).split(\"\");\n        s[14] = '4';\n        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n        s[8] = s[13] = s[18] = s[23] = '-';\n        var uuid = s.join('');\n        return uuid;\n    }\n\n    function parseCallback(url) {\n        var oauth = parseCallbackUrl(url);\n        if (!oauth) {\n            return;\n        }\n\n        var oauthState = callbackStorage.get(oauth.state);\n\n        if (oauthState) {\n            oauth.valid = true;\n            oauth.redirectUri = oauthState.redirectUri;\n            oauth.storedNonce = oauthState.nonce;\n            oauth.prompt = oauthState.prompt;\n            oauth.pkceCodeVerifier = oauthState.pkceCodeVerifier;\n        }\n\n        return oauth;\n    }\n\n    function parseCallbackUrl(url) {\n        var supportedParams;\n        switch (kc.flow) {\n            case 'standard':\n                supportedParams = ['code', 'state', 'session_state', 'kc_action_status', 'iss'];\n                break;\n            case 'implicit':\n                supportedParams = ['access_token', 'token_type', 'id_token', 'state', 'session_state', 'expires_in', 'kc_action_status', 'iss'];\n                break;\n            case 'hybrid':\n                supportedParams = ['access_token', 'token_type', 'id_token', 'code', 'state', 'session_state', 'expires_in', 'kc_action_status', 'iss'];\n                break;\n        }\n\n        supportedParams.push('error');\n        supportedParams.push('error_description');\n        supportedParams.push('error_uri');\n\n        var queryIndex = url.indexOf('?');\n        var fragmentIndex = url.indexOf('#');\n\n        var newUrl;\n        var parsed;\n\n        if (kc.responseMode === 'query' && queryIndex !== -1) {\n            newUrl = url.substring(0, queryIndex);\n            parsed = parseCallbackParams(url.substring(queryIndex + 1, fragmentIndex !== -1 ? fragmentIndex : url.length), supportedParams);\n            if (parsed.paramsString !== '') {\n                newUrl += '?' + parsed.paramsString;\n            }\n            if (fragmentIndex !== -1) {\n                newUrl += url.substring(fragmentIndex);\n            }\n        } else if (kc.responseMode === 'fragment' && fragmentIndex !== -1) {\n            newUrl = url.substring(0, fragmentIndex);\n            parsed = parseCallbackParams(url.substring(fragmentIndex + 1), supportedParams);\n            if (parsed.paramsString !== '') {\n                newUrl += '#' + parsed.paramsString;\n            }\n        }\n\n        if (parsed && parsed.oauthParams) {\n            if (kc.flow === 'standard' || kc.flow === 'hybrid') {\n                if ((parsed.oauthParams.code || parsed.oauthParams.error) && parsed.oauthParams.state) {\n                    parsed.oauthParams.newUrl = newUrl;\n                    return parsed.oauthParams;\n                }\n            } else if (kc.flow === 'implicit') {\n                if ((parsed.oauthParams.access_token || parsed.oauthParams.error) && parsed.oauthParams.state) {\n                    parsed.oauthParams.newUrl = newUrl;\n                    return parsed.oauthParams;\n                }\n            }\n        }\n    }\n\n    function parseCallbackParams(paramsString, supportedParams) {\n        var p = paramsString.split('&');\n        var result = {\n            paramsString: '',\n            oauthParams: {}\n        };\n        for (var i = 0; i < p.length; i++) {\n            var split = p[i].indexOf(\"=\");\n            var key = p[i].slice(0, split);\n            if (supportedParams.indexOf(key) !== -1) {\n                result.oauthParams[key] = p[i].slice(split + 1);\n            } else {\n                if (result.paramsString !== '') {\n                    result.paramsString += '&';\n                }\n                result.paramsString += p[i];\n            }\n        }\n        return result;\n    }\n\n    function createPromise() {\n        // Need to create a native Promise which also preserves the\n        // interface of the custom promise type previously used by the API\n        var p = {\n            setSuccess: function(result) {\n                p.resolve(result);\n            },\n\n            setError: function(result) {\n                p.reject(result);\n            }\n        };\n        p.promise = new Promise(function(resolve, reject) {\n            p.resolve = resolve;\n            p.reject = reject;\n        });\n\n        return p;\n    }\n\n    // Function to extend existing native Promise with timeout\n    function applyTimeoutToPromise(promise, timeout, errorMessage) {\n        var timeoutHandle = null;\n        var timeoutPromise = new Promise(function (resolve, reject) {\n            timeoutHandle = setTimeout(function () {\n                reject({ \"error\": errorMessage || \"Promise is not settled within timeout of \" + timeout + \"ms\" });\n            }, timeout);\n        });\n\n        return Promise.race([promise, timeoutPromise]).finally(function () {\n            clearTimeout(timeoutHandle);\n        });\n    }\n\n    function setupCheckLoginIframe() {\n        var promise = createPromise();\n\n        if (!loginIframe.enable) {\n            promise.setSuccess();\n            return promise.promise;\n        }\n\n        if (loginIframe.iframe) {\n            promise.setSuccess();\n            return promise.promise;\n        }\n\n        var iframe = document.createElement('iframe');\n        loginIframe.iframe = iframe;\n\n        iframe.onload = function() {\n            var authUrl = kc.endpoints.authorize();\n            if (authUrl.charAt(0) === '/') {\n                loginIframe.iframeOrigin = getOrigin();\n            } else {\n                loginIframe.iframeOrigin = authUrl.substring(0, authUrl.indexOf('/', 8));\n            }\n            promise.setSuccess();\n        };\n\n        var src = kc.endpoints.checkSessionIframe();\n        iframe.setAttribute('src', src );\n        iframe.setAttribute('sandbox', 'allow-storage-access-by-user-activation allow-scripts allow-same-origin');\n        iframe.setAttribute('title', 'keycloak-session-iframe' );\n        iframe.style.display = 'none';\n        document.body.appendChild(iframe);\n\n        var messageCallback = function(event) {\n            if ((event.origin !== loginIframe.iframeOrigin) || (loginIframe.iframe.contentWindow !== event.source)) {\n                return;\n            }\n\n            if (!(event.data == 'unchanged' || event.data == 'changed' || event.data == 'error')) {\n                return;\n            }\n\n\n            if (event.data != 'unchanged') {\n                kc.clearToken();\n            }\n\n            var callbacks = loginIframe.callbackList.splice(0, loginIframe.callbackList.length);\n\n            for (var i = callbacks.length - 1; i >= 0; --i) {\n                var promise = callbacks[i];\n                if (event.data == 'error') {\n                    promise.setError();\n                } else {\n                    promise.setSuccess(event.data == 'unchanged');\n                }\n            }\n        };\n\n        window.addEventListener('message', messageCallback, false);\n\n        return promise.promise;\n    }\n\n    function scheduleCheckIframe() {\n        if (loginIframe.enable) {\n            if (kc.token) {\n                setTimeout(function() {\n                    checkLoginIframe().then(function(unchanged) {\n                        if (unchanged) {\n                            scheduleCheckIframe();\n                        }\n                    });\n                }, loginIframe.interval * 1000);\n            }\n        }\n    }\n\n    function checkLoginIframe() {\n        var promise = createPromise();\n\n        if (loginIframe.iframe && loginIframe.iframeOrigin ) {\n            var msg = kc.clientId + ' ' + (kc.sessionId ? kc.sessionId : '');\n            loginIframe.callbackList.push(promise);\n            var origin = loginIframe.iframeOrigin;\n            if (loginIframe.callbackList.length == 1) {\n                loginIframe.iframe.contentWindow.postMessage(msg, origin);\n            }\n        } else {\n            promise.setSuccess();\n        }\n\n        return promise.promise;\n    }\n\n    function check3pCookiesSupported() {\n        var promise = createPromise();\n\n        if (loginIframe.enable || kc.silentCheckSsoRedirectUri) {\n            var iframe = document.createElement('iframe');\n            iframe.setAttribute('src', kc.endpoints.thirdPartyCookiesIframe());\n            iframe.setAttribute('sandbox', 'allow-storage-access-by-user-activation allow-scripts allow-same-origin');\n            iframe.setAttribute('title', 'keycloak-3p-check-iframe' );\n            iframe.style.display = 'none';\n            document.body.appendChild(iframe);\n\n            var messageCallback = function(event) {\n                if (iframe.contentWindow !== event.source) {\n                    return;\n                }\n\n                if (event.data !== \"supported\" && event.data !== \"unsupported\") {\n                    return;\n                } else if (event.data === \"unsupported\") {\n                    logWarn(\n                        \"[KEYCLOAK] Your browser is blocking access to 3rd-party cookies, this means:\\n\\n\" +\n                        \" - It is not possible to retrieve tokens without redirecting to the Keycloak server (a.k.a. no support for silent authentication).\\n\" +\n                        \" - It is not possible to automatically detect changes to the session status (such as the user logging out in another tab).\\n\\n\" +\n                        \"For more information see: https://www.keycloak.org/docs/latest/securing_apps/#_modern_browsers\"\n                    );\n\n                    loginIframe.enable = false;\n                    if (kc.silentCheckSsoFallback) {\n                        kc.silentCheckSsoRedirectUri = false;\n                    }\n                }\n\n                document.body.removeChild(iframe);\n                window.removeEventListener(\"message\", messageCallback);\n                promise.setSuccess();\n            };\n\n            window.addEventListener('message', messageCallback, false);\n        } else {\n            promise.setSuccess();\n        }\n\n        return applyTimeoutToPromise(promise.promise, kc.messageReceiveTimeout, \"Timeout when waiting for 3rd party check iframe message.\");\n    }\n\n    function loadAdapter(type) {\n        if (!type || type == 'default') {\n            return {\n                login: function(options) {\n                    window.location.assign(kc.createLoginUrl(options));\n                    return createPromise().promise;\n                },\n\n                logout: function(options) {\n                    window.location.replace(kc.createLogoutUrl(options));\n                    return createPromise().promise;\n                },\n\n                register: function(options) {\n                    window.location.assign(kc.createRegisterUrl(options));\n                    return createPromise().promise;\n                },\n\n                accountManagement : function() {\n                    var accountUrl = kc.createAccountUrl();\n                    if (typeof accountUrl !== 'undefined') {\n                        window.location.href = accountUrl;\n                    } else {\n                        throw \"Not supported by the OIDC server\";\n                    }\n                    return createPromise().promise;\n                },\n\n                redirectUri: function(options, encodeHash) {\n\n                    if (options && options.redirectUri) {\n                        return options.redirectUri;\n                    } else if (kc.redirectUri) {\n                        return kc.redirectUri;\n                    } else {\n                        return location.href;\n                    }\n                }\n            };\n        }\n\n        if (type == 'cordova') {\n            loginIframe.enable = false;\n            var cordovaOpenWindowWrapper = function(loginUrl, target, options) {\n                if (window.cordova && window.cordova.InAppBrowser) {\n                    // Use inappbrowser for IOS and Android if available\n                    return window.cordova.InAppBrowser.open(loginUrl, target, options);\n                } else {\n                    return window.open(loginUrl, target, options);\n                }\n            };\n\n            var shallowCloneCordovaOptions = function (userOptions) {\n                if (userOptions && userOptions.cordovaOptions) {\n                    return Object.keys(userOptions.cordovaOptions).reduce(function (options, optionName) {\n                        options[optionName] = userOptions.cordovaOptions[optionName];\n                        return options;\n                    }, {});\n                } else {\n                    return {};\n                }\n            };\n\n            var formatCordovaOptions = function (cordovaOptions) {\n                return Object.keys(cordovaOptions).reduce(function (options, optionName) {\n                    options.push(optionName+\"=\"+cordovaOptions[optionName]);\n                    return options;\n                }, []).join(\",\");\n            };\n\n            var createCordovaOptions = function (userOptions) {\n                var cordovaOptions = shallowCloneCordovaOptions(userOptions);\n                cordovaOptions.location = 'no';\n                if (userOptions && userOptions.prompt == 'none') {\n                    cordovaOptions.hidden = 'yes';\n                }\n                return formatCordovaOptions(cordovaOptions);\n            };\n\n            var getCordovaRedirectUri = function() {\n                return kc.redirectUri || 'http://localhost';\n            };\n            \n            return {\n                login: function(options) {\n                    var promise = createPromise();\n\n                    var cordovaOptions = createCordovaOptions(options);\n                    var loginUrl = kc.createLoginUrl(options);\n                    var ref = cordovaOpenWindowWrapper(loginUrl, '_blank', cordovaOptions);\n                    var completed = false;\n\n                    var closed = false;\n                    var closeBrowser = function() {\n                        closed = true;\n                        ref.close();\n                    };\n\n                    ref.addEventListener('loadstart', function(event) {\n                        if (event.url.indexOf(getCordovaRedirectUri()) == 0) {\n                            var callback = parseCallback(event.url);\n                            processCallback(callback, promise);\n                            closeBrowser();\n                            completed = true;\n                        }\n                    });\n\n                    ref.addEventListener('loaderror', function(event) {\n                        if (!completed) {\n                            if (event.url.indexOf(getCordovaRedirectUri()) == 0) {\n                                var callback = parseCallback(event.url);\n                                processCallback(callback, promise);\n                                closeBrowser();\n                                completed = true;\n                            } else {\n                                promise.setError();\n                                closeBrowser();\n                            }\n                        }\n                    });\n\n                    ref.addEventListener('exit', function(event) {\n                        if (!closed) {\n                            promise.setError({\n                                reason: \"closed_by_user\"\n                            });\n                        }\n                    });\n\n                    return promise.promise;\n                },\n\n                logout: function(options) {\n                    var promise = createPromise();\n\n                    var logoutUrl = kc.createLogoutUrl(options);\n                    var ref = cordovaOpenWindowWrapper(logoutUrl, '_blank', 'location=no,hidden=yes,clearcache=yes');\n\n                    var error;\n\n                    ref.addEventListener('loadstart', function(event) {\n                        if (event.url.indexOf(getCordovaRedirectUri()) == 0) {\n                            ref.close();\n                        }\n                    });\n\n                    ref.addEventListener('loaderror', function(event) {\n                        if (event.url.indexOf(getCordovaRedirectUri()) == 0) {\n                            ref.close();\n                        } else {\n                            error = true;\n                            ref.close();\n                        }\n                    });\n\n                    ref.addEventListener('exit', function(event) {\n                        if (error) {\n                            promise.setError();\n                        } else {\n                            kc.clearToken();\n                            promise.setSuccess();\n                        }\n                    });\n\n                    return promise.promise;\n                },\n\n                register : function(options) {\n                    var promise = createPromise();\n                    var registerUrl = kc.createRegisterUrl();\n                    var cordovaOptions = createCordovaOptions(options);\n                    var ref = cordovaOpenWindowWrapper(registerUrl, '_blank', cordovaOptions);\n                    ref.addEventListener('loadstart', function(event) {\n                        if (event.url.indexOf(getCordovaRedirectUri()) == 0) {\n                            ref.close();\n                            var oauth = parseCallback(event.url);\n                            processCallback(oauth, promise);\n                        }\n                    });\n                    return promise.promise;\n                },\n\n                accountManagement : function() {\n                    var accountUrl = kc.createAccountUrl();\n                    if (typeof accountUrl !== 'undefined') {\n                        var ref = cordovaOpenWindowWrapper(accountUrl, '_blank', 'location=no');\n                        ref.addEventListener('loadstart', function(event) {\n                            if (event.url.indexOf(getCordovaRedirectUri()) == 0) {\n                                ref.close();\n                            }\n                        });\n                    } else {\n                        throw \"Not supported by the OIDC server\";\n                    }\n                },\n\n                redirectUri: function(options) {\n                    return getCordovaRedirectUri();\n                }\n            }\n        }\n\n        if (type == 'cordova-native') {\n            loginIframe.enable = false;\n\n            return {\n                login: function(options) {\n                    var promise = createPromise();\n                    var loginUrl = kc.createLoginUrl(options);\n\n                    universalLinks.subscribe('keycloak', function(event) {\n                        universalLinks.unsubscribe('keycloak');\n                        window.cordova.plugins.browsertab.close();\n                        var oauth = parseCallback(event.url);\n                        processCallback(oauth, promise);\n                    });\n\n                    window.cordova.plugins.browsertab.openUrl(loginUrl);\n                    return promise.promise;\n                },\n\n                logout: function(options) {\n                    var promise = createPromise();\n                    var logoutUrl = kc.createLogoutUrl(options);\n\n                    universalLinks.subscribe('keycloak', function(event) {\n                        universalLinks.unsubscribe('keycloak');\n                        window.cordova.plugins.browsertab.close();\n                        kc.clearToken();\n                        promise.setSuccess();\n                    });\n\n                    window.cordova.plugins.browsertab.openUrl(logoutUrl);\n                    return promise.promise;\n                },\n\n                register : function(options) {\n                    var promise = createPromise();\n                    var registerUrl = kc.createRegisterUrl(options);\n                    universalLinks.subscribe('keycloak' , function(event) {\n                        universalLinks.unsubscribe('keycloak');\n                        window.cordova.plugins.browsertab.close();\n                        var oauth = parseCallback(event.url);\n                        processCallback(oauth, promise);\n                    });\n                    window.cordova.plugins.browsertab.openUrl(registerUrl);\n                    return promise.promise;\n\n                },\n\n                accountManagement : function() {\n                    var accountUrl = kc.createAccountUrl();\n                    if (typeof accountUrl !== 'undefined') {\n                        window.cordova.plugins.browsertab.openUrl(accountUrl);\n                    } else {\n                        throw \"Not supported by the OIDC server\";\n                    }\n                },\n\n                redirectUri: function(options) {\n                    if (options && options.redirectUri) {\n                        return options.redirectUri;\n                    } else if (kc.redirectUri) {\n                        return kc.redirectUri;\n                    } else {\n                        return \"http://localhost\";\n                    }\n                }\n            }\n        }\n\n        throw 'invalid adapter type: ' + type;\n    }\n\n    var LocalStorage = function() {\n        if (!(this instanceof LocalStorage)) {\n            return new LocalStorage();\n        }\n\n        localStorage.setItem('kc-test', 'test');\n        localStorage.removeItem('kc-test');\n\n        var cs = this;\n\n        function clearExpired() {\n            var time = new Date().getTime();\n            for (var i = 0; i < localStorage.length; i++)  {\n                var key = localStorage.key(i);\n                if (key && key.indexOf('kc-callback-') == 0) {\n                    var value = localStorage.getItem(key);\n                    if (value) {\n                        try {\n                            var expires = JSON.parse(value).expires;\n                            if (!expires || expires < time) {\n                                localStorage.removeItem(key);\n                            }\n                        } catch (err) {\n                            localStorage.removeItem(key);\n                        }\n                    }\n                }\n            }\n        }\n\n        cs.get = function(state) {\n            if (!state) {\n                return;\n            }\n\n            var key = 'kc-callback-' + state;\n            var value = localStorage.getItem(key);\n            if (value) {\n                localStorage.removeItem(key);\n                value = JSON.parse(value);\n            }\n\n            clearExpired();\n            return value;\n        };\n\n        cs.add = function(state) {\n            clearExpired();\n\n            var key = 'kc-callback-' + state.state;\n            state.expires = new Date().getTime() + (60 * 60 * 1000);\n            localStorage.setItem(key, JSON.stringify(state));\n        };\n    };\n\n    var CookieStorage = function() {\n        if (!(this instanceof CookieStorage)) {\n            return new CookieStorage();\n        }\n\n        var cs = this;\n\n        cs.get = function(state) {\n            if (!state) {\n                return;\n            }\n\n            var value = getCookie('kc-callback-' + state);\n            setCookie('kc-callback-' + state, '', cookieExpiration(-100));\n            if (value) {\n                return JSON.parse(value);\n            }\n        };\n\n        cs.add = function(state) {\n            setCookie('kc-callback-' + state.state, JSON.stringify(state), cookieExpiration(60));\n        };\n\n        cs.removeItem = function(key) {\n            setCookie(key, '', cookieExpiration(-100));\n        };\n\n        var cookieExpiration = function (minutes) {\n            var exp = new Date();\n            exp.setTime(exp.getTime() + (minutes*60*1000));\n            return exp;\n        };\n\n        var getCookie = function (key) {\n            var name = key + '=';\n            var ca = document.cookie.split(';');\n            for (var i = 0; i < ca.length; i++) {\n                var c = ca[i];\n                while (c.charAt(0) == ' ') {\n                    c = c.substring(1);\n                }\n                if (c.indexOf(name) == 0) {\n                    return c.substring(name.length, c.length);\n                }\n            }\n            return '';\n        };\n\n        var setCookie = function (key, value, expirationDate) {\n            var cookie = key + '=' + value + '; '\n                + 'expires=' + expirationDate.toUTCString() + '; ';\n            document.cookie = cookie;\n        };\n    };\n\n    function createCallbackStorage() {\n        try {\n            return new LocalStorage();\n        } catch (err) {\n        }\n\n        return new CookieStorage();\n    }\n\n    function createLogger(fn) {\n        return function() {\n            if (kc.enableLogging) {\n                fn.apply(console, Array.prototype.slice.call(arguments));\n            }\n        };\n    }\n}\n\n\n\n// EXTERNAL MODULE: ./src/app.ts\nvar app = __webpack_require__(859);\n;// CONCATENATED MODULE: ./src/index.ts\n\n//grant_type=password&client_id=backend&client_secret=XyydRLFh9iHBOf91dejPV0qMOoELytPL&username=omnial&password=omnial\nconst keycloak = new Keycloak({\n    url: 'http://localhost:8000',\n    realm: 'omnial',\n    clientId: 'frontend'\n});\n// @ts-ignore\nasync function init() {\n    try {\n        const authenticated = await keycloak.init({ enableLogging: true });\n        console.log(`User is ${authenticated ? 'authenticated' : 'not authenticated'}`);\n        if (!authenticated) {\n            await keycloak.login();\n        }\n    }\n    catch (error) {\n        console.error('Failed to initialize adapter:', error);\n    }\n    localStorage.setItem('token', keycloak.token);\n}\nconst token = init();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///822\n")},991:(__unused_webpack_module,exports)=>{"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkxLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzc0NDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///991\n")},235:(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.10.1\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2023\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA256_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = __webpack_require__.g;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && \"object\" === 'object' && module.exports;\n  var AMD =  true && __webpack_require__.amdO;\n  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (outputType, is224) {\n    return function (message) {\n      return new Sha256(is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function (is224) {\n    var method = createOutputMethod('hex', is224);\n    if (NODE_JS) {\n      method = nodeWrap(method, is224);\n    }\n    method.create = function () {\n      return new Sha256(is224);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method, is224) {\n    var crypto = __webpack_require__(139)\n    var Buffer = (__webpack_require__(574).Buffer);\n    var algorithm = is224 ? 'sha224' : 'sha256';\n    var bufferFrom;\n    if (Buffer.from && !root.JS_SHA256_NO_BUFFER_FROM) {\n      bufferFrom = Buffer.from;\n    } else {\n      bufferFrom = function (message) {\n        return new Buffer(message);\n      };\n    }\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw new Error(ERROR);\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash(algorithm).update(bufferFrom(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  var createHmacOutputMethod = function (outputType, is224) {\n    return function (key, message) {\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createHmacMethod = function (is224) {\n    var method = createHmacOutputMethod('hex', is224);\n    method.create = function (key) {\n      return new HmacSha256(key, is224);\n    };\n    method.update = function (key, message) {\n      return method.create(key).update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createHmacOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  function Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    if (is224) {\n      this.h0 = 0xc1059ed8;\n      this.h1 = 0x367cd507;\n      this.h2 = 0x3070dd17;\n      this.h3 = 0xf70e5939;\n      this.h4 = 0xffc00b31;\n      this.h5 = 0x68581511;\n      this.h6 = 0x64f98fa7;\n      this.h7 = 0xbefa4fa4;\n    } else { // 256\n      this.h0 = 0x6a09e667;\n      this.h1 = 0xbb67ae85;\n      this.h2 = 0x3c6ef372;\n      this.h3 = 0xa54ff53a;\n      this.h4 = 0x510e527f;\n      this.h5 = 0x9b05688c;\n      this.h6 = 0x1f83d9ab;\n      this.h7 = 0x5be0cd19;\n    }\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n  }\n\n  Sha256.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n          blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n          blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha256.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n    for (j = 16; j < 64; ++j) {\n      // rightrotate\n      t1 = blocks[j - 15];\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n      t1 = blocks[j - 2];\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n      if (this.first) {\n        if (this.is224) {\n          ab = 300032;\n          t1 = blocks[0] - 1413257819;\n          h = t1 - 150054599 << 0;\n          d = t1 + 24177077 << 0;\n        } else {\n          ab = 704751109;\n          t1 = blocks[0] - 210244248;\n          h = t1 - 1521486534 << 0;\n          d = t1 + 143694565 << 0;\n        }\n        this.first = false;\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n        ab = a & b;\n        maj = ab ^ (a & c) ^ bc;\n        ch = (e & f) ^ (~e & g);\n        t1 = h + s1 + ch + K[j] + blocks[j];\n        t2 = s0 + maj;\n        h = d + t1 << 0;\n        d = t1 + t2 << 0;\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n      da = d & a;\n      maj = da ^ (d & b) ^ ab;\n      ch = (h & e) ^ (~h & f);\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n      t2 = s0 + maj;\n      g = c + t1 << 0;\n      c = t1 + t2 << 0;\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n      cd = c & d;\n      maj = cd ^ (c & a) ^ da;\n      ch = (g & h) ^ (~g & e);\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n      t2 = s0 + maj;\n      f = b + t1 << 0;\n      b = t1 + t2 << 0;\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n      bc = b & c;\n      maj = bc ^ (b & d) ^ cd;\n      ch = (f & g) ^ (~f & h);\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n      t2 = s0 + maj;\n      e = a + t1 << 0;\n      a = t1 + t2 << 0;\n      this.chromeBugWorkAround = true;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n  };\n\n  Sha256.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\n      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\n      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\n      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\n      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\n      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\n      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\n      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\n      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\n    if (!this.is224) {\n      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\n        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\n        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\n        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\n    }\n    return hex;\n  };\n\n  Sha256.prototype.toString = Sha256.prototype.hex;\n\n  Sha256.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var arr = [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\n    ];\n    if (!this.is224) {\n      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\n    }\n    return arr;\n  };\n\n  Sha256.prototype.array = Sha256.prototype.digest;\n\n  Sha256.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n      dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n  };\n\n  function HmacSha256(key, is224, sharedMemory) {\n    var i, type = typeof key;\n    if (type === 'string') {\n      var bytes = [], length = key.length, index = 0, code;\n      for (i = 0; i < length; ++i) {\n        code = key.charCodeAt(i);\n        if (code < 0x80) {\n          bytes[index++] = code;\n        } else if (code < 0x800) {\n          bytes[index++] = (0xc0 | (code >> 6));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes[index++] = (0xe0 | (code >> 12));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\n          bytes[index++] = (0xf0 | (code >> 18));\n          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        }\n      }\n      key = bytes;\n    } else {\n      if (type === 'object') {\n        if (key === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n          key = new Uint8Array(key);\n        } else if (!Array.isArray(key)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n    }\n\n    if (key.length > 64) {\n      key = (new Sha256(is224, true)).update(key).array();\n    }\n\n    var oKeyPad = [], iKeyPad = [];\n    for (i = 0; i < 64; ++i) {\n      var b = key[i] || 0;\n      oKeyPad[i] = 0x5c ^ b;\n      iKeyPad[i] = 0x36 ^ b;\n    }\n\n    Sha256.call(this, is224, sharedMemory);\n\n    this.update(iKeyPad);\n    this.oKeyPad = oKeyPad;\n    this.inner = true;\n    this.sharedMemory = sharedMemory;\n  }\n  HmacSha256.prototype = new Sha256();\n\n  HmacSha256.prototype.finalize = function () {\n    Sha256.prototype.finalize.call(this);\n    if (this.inner) {\n      this.inner = false;\n      var innerHash = this.array();\n      Sha256.call(this, this.is224, this.sharedMemory);\n      this.update(this.oKeyPad);\n      this.update(innerHash);\n      Sha256.prototype.finalize.call(this);\n    }\n  };\n\n  var exports = createMethod();\n  exports.sha256 = exports;\n  exports.sha224 = createMethod(true);\n  exports.sha256.hmac = createHmacMethod();\n  exports.sha224.hmac = createHmacMethod(true);\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha256 = exports.sha256;\n    root.sha224 = exports.sha224;\n    if (AMD) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return exports;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///235\n")},574:()=>{},139:()=>{}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I](C,C.exports,__webpack_require__),C.exports}__webpack_require__.amdO={},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}();var __webpack_exports__=__webpack_require__(822)})();